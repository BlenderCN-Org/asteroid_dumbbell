from __future__ import absolute_import, division, print_function, unicode_literals
import numpy as np
import dynamics.asteroid
import pdb
class TestAsteroidItokawa32():
    name = 'itokawa'
    faces = 32
    rel_tol = 1e-3
    decimal = 3
    ast = dynamics.asteroid.Asteroid(name, faces)

    state = np.array([1.0,0.2,0.0])

    (U,Ug, Ug_mat, Ulap) = ast.polyhedron_potential(state)

    U_true =      1.939451534093495e-09
    Ug_true = 1e-8 * np.array([  -0.190360117668520, -0.037780339090467, 0.000660123194309])
    Ug_mat_true = 1e-8 * np.array([
           [0.369754362829727 ,  0.113145457013687,  -0.001696976548183],
          [ 0.113145457013687 , -0.173393415839417 , -0.000358656607673],
          [-0.001696976548184 , -0.000358656607673 , -0.196360946990310]])
    Ulap_true = 9.897317340690216e-25

    V1 = np.array([
              [ 0.252295000000000 ,  0.043462000000000 , -0.043121000000000],
              [ 0.075396000000000 , -0.115653000000000 ,  0.089584000000000],
              [-0.269300000000000 , -0.030585000000000 , -0.029666000000000],
              [ 0.044007000000000 ,  0.002901000000000 , -0.133525000000000],
              [ 0.244768000000000 , -0.073846000000000 ,  0.000187000000000],
              [ 0.252836000000000 ,  0.043803000000000 ,  0.043480000000000],
              [-0.068411000000000 , -0.100228000000000 ,  0.090606000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [-0.068411000000000 , -0.100228000000000 ,  0.090606000000000],
              [ 0.244768000000000 , -0.073846000000000 ,  0.000187000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [-0.179608000000000 , -0.100611000000000 , -0.068558000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000],
              [-0.233918000000000 , -0.039645000000000 ,  0.077145000000000],
              [ 0.053842000000000 ,  0.156218000000000 ,  0.000054000000000],
              [ 0.053842000000000 ,  0.156218000000000 ,  0.000054000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [ 0.252836000000000 ,  0.043803000000000 ,  0.043480000000000],
              [ 0.252295000000000 ,  0.043462000000000 , -0.043121000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [ 0.054578000000000 ,  0.096511000000000 , -0.104493000000000],
              [ 0.044007000000000 ,  0.002901000000000 , -0.133525000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [-0.233918000000000 , -0.039645000000000 ,  0.077145000000000],
              [ 0.054578000000000 ,  0.096511000000000 , -0.104493000000000],
              [ 0.192707000000000 , -0.030565000000000 , -0.095858000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [ 0.252295000000000 ,  0.043462000000000 , -0.043121000000000],
              [-0.233918000000000 , -0.039645000000000 ,  0.077145000000000],
              [-0.233918000000000 , -0.039645000000000 ,  0.077145000000000],
              [-0.117141000000000 ,  0.125833000000000 ,  0.057424000000000],
              [ 0.044007000000000 ,  0.002901000000000 , -0.133525000000000]])

    V2 = np.array([
              [ 0.173015000000000 ,  0.092542000000000 ,  0.070165000000000],
              [ 0.252836000000000 ,  0.043803000000000 ,  0.043480000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000],
              [-0.179608000000000 , -0.100611000000000 , -0.068558000000000],
              [ 0.192707000000000 , -0.030565000000000 , -0.095858000000000],
              [ 0.173015000000000 ,  0.092542000000000 ,  0.070165000000000],
              [ 0.075396000000000 , -0.115653000000000 ,  0.089584000000000],
              [ 0.173015000000000 ,  0.092542000000000 ,  0.070165000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [ 0.075396000000000 , -0.115653000000000 ,  0.089584000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [-0.068411000000000 , -0.100228000000000 ,  0.090606000000000],
              [-0.117141000000000 ,  0.125833000000000 ,  0.057424000000000],
              [ 0.173015000000000 ,  0.092542000000000 ,  0.070165000000000],
              [-0.117141000000000 ,  0.125833000000000 ,  0.057424000000000],
              [ 0.075396000000000 , -0.115653000000000 ,  0.089584000000000],
              [ 0.054578000000000 ,  0.096511000000000 , -0.104493000000000],
              [ 0.192707000000000 , -0.030565000000000 , -0.095858000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [ 0.192707000000000 , -0.030565000000000 , -0.095858000000000],
              [-0.179608000000000 , -0.100611000000000 , -0.068558000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [ 0.252295000000000 ,  0.043462000000000 , -0.043121000000000],
              [ 0.044007000000000 ,  0.002901000000000 , -0.133525000000000],
              [-0.233918000000000 , -0.039645000000000 ,  0.077145000000000],
              [ 0.252836000000000 ,  0.043803000000000 ,  0.043480000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000]])
    
    V3 = np.array([
              [ 0.252836000000000 ,  0.043803000000000 ,  0.043480000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [-0.233918000000000 , -0.039645000000000 ,  0.077145000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000],
              [ 0.252295000000000 ,  0.043462000000000 , -0.043121000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [-0.117141000000000 ,  0.125833000000000 ,  0.057424000000000],
              [ 0.075396000000000 , -0.115653000000000 ,  0.089584000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [-0.269300000000000 , -0.030585000000000 , -0.029666000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000],
              [ 0.054578000000000 ,  0.096511000000000 , -0.104493000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [ 0.173015000000000 ,  0.092542000000000 ,  0.070165000000000],
              [ 0.252295000000000 ,  0.043462000000000 , -0.043121000000000],
              [ 0.053842000000000 ,  0.156218000000000 ,  0.000054000000000],
              [ 0.244768000000000 , -0.073846000000000 ,  0.000187000000000],
              [ 0.053842000000000 ,  0.156218000000000 ,  0.000054000000000],
              [ 0.244768000000000 , -0.073846000000000 ,  0.000187000000000],
              [ 0.053842000000000 ,  0.156218000000000 ,  0.000054000000000],
              [-0.175985000000000 , -0.122840000000000 , -0.000545000000000],
              [ 0.044007000000000 ,  0.002901000000000 , -0.133525000000000],
              [-0.269300000000000 , -0.030585000000000 , -0.029666000000000],
              [ 0.192707000000000 , -0.030565000000000 , -0.095858000000000],
              [ 0.054578000000000 ,  0.096511000000000 , -0.104493000000000],
              [-0.239770000000000 , -0.043186000000000 , -0.085045000000000],
              [ 0.244768000000000 , -0.073846000000000 ,  0.000187000000000],
              [-0.218058000000000 ,  0.092941000000000 ,  0.036494000000000],
              [-0.068411000000000 , -0.100228000000000 ,  0.090606000000000],
              [ 0.022387000000000 ,  0.038713000000000 ,  0.133993000000000],
              [ 0.054578000000000 ,  0.096511000000000 , -0.104493000000000]])

    e1 = np.array([
            [-0.079280000000000 ,  0.049080000000000 ,  0.113286000000000],
            [ 0.177440000000000 ,  0.159456000000000 , -0.046104000000000],
            [ 0.029530000000000 , -0.012601000000000 , -0.055379000000000],
            [-0.223615000000000 , -0.103512000000000 ,  0.064967000000000],
            [-0.052061000000000 ,  0.043281000000000 , -0.096045000000000],
            [-0.079821000000000 ,  0.048739000000000 ,  0.026685000000000],
            [ 0.143807000000000 , -0.015425000000000 , -0.001022000000000],
            [ 0.150628000000000 ,  0.053829000000000 , -0.063828000000000],
            [-0.107574000000000 , -0.022612000000000 , -0.091151000000000],
            [-0.169372000000000 , -0.041807000000000 ,  0.089397000000000],
            [-0.021712000000000 , -0.136127000000000 , -0.121539000000000],
            [ 0.003623000000000 , -0.022229000000000 ,  0.068013000000000],
            [ 0.021712000000000 ,  0.136127000000000 ,  0.121539000000000],
            [ 0.165507000000000 , -0.060583000000000 ,  0.013461000000000],
            [-0.170983000000000 , -0.030385000000000 ,  0.057370000000000],
            [ 0.119173000000000 , -0.063676000000000 ,  0.070111000000000],
            [ 0.100917000000000 ,  0.032892000000000 ,  0.020930000000000],
            [-0.177440000000000 , -0.159456000000000 ,  0.046104000000000],
            [-0.197717000000000 ,  0.053049000000000 , -0.061372000000000],
            [ 0.368692000000000 ,  0.092275000000000 , -0.095313000000000],
            [-0.272636000000000 , -0.003570000000000 ,  0.140987000000000],
            [ 0.148700000000000 , -0.033466000000000 ,  0.037667000000000],
            [-0.003623000000000 ,  0.022229000000000 , -0.068013000000000],
            [ 0.015860000000000 ,  0.132586000000000 , -0.040651000000000],
            [ 0.197717000000000 , -0.053049000000000 ,  0.061372000000000],
            [-0.148700000000000 ,  0.033466000000000 , -0.037667000000000],
            [-0.057933000000000 ,  0.083195000000000 ,  0.077690000000000],
            [ 0.000541000000000 ,  0.000341000000000 ,  0.086601000000000],
            [ 0.256305000000000 ,  0.078358000000000 ,  0.056848000000000],
            [ 0.057933000000000 , -0.083195000000000 , -0.077690000000000],
            [-0.100917000000000 , -0.032892000000000 , -0.020930000000000],
            [-0.283777000000000 , -0.046087000000000 ,  0.048480000000000]])

    e2 = np.array([
          [ 0.079821000000000 , -0.048739000000000 , -0.026685000000000],
          [-0.230449000000000 , -0.005090000000000 ,  0.090513000000000],
          [ 0.005852000000000 ,  0.003541000000000 ,  0.162190000000000],
          [-0.060162000000000 ,  0.057425000000000 , -0.016487000000000],
          [ 0.059588000000000 ,  0.074027000000000 ,  0.052737000000000],
          [-0.150628000000000 , -0.053829000000000 ,  0.063828000000000],
          [-0.053009000000000 ,  0.154366000000000 ,  0.044409000000000],
          [-0.290156000000000 ,  0.033291000000000 , -0.012741000000000],
          [ 0.251381000000000 ,  0.007187000000000 ,  0.090129000000000],
          [-0.251381000000000 , -0.007187000000000 , -0.090129000000000],
          [-0.029530000000000 ,  0.012601000000000 ,  0.055379000000000],
          [-0.063785000000000 ,  0.079654000000000 , -0.084500000000000],
          [ 0.272636000000000 ,  0.003570000000000 , -0.140987000000000],
          [ 0.090798000000000 ,  0.138941000000000 ,  0.043387000000000],
          [ 0.290156000000000 , -0.033291000000000 ,  0.012741000000000],
          [ 0.079280000000000 , -0.049080000000000 , -0.113286000000000],
          [ 0.170983000000000 ,  0.030385000000000 , -0.057370000000000],
          [ 0.169372000000000 ,  0.041807000000000 , -0.089397000000000],
          [-0.000736000000000 ,  0.059707000000000 ,  0.104547000000000],
          [ 0.052061000000000 , -0.043281000000000 ,  0.096045000000000],
          [ 0.271900000000000 ,  0.063277000000000 , -0.036440000000000],
          [-0.368692000000000 , -0.092275000000000 ,  0.095313000000000],
          [ 0.223615000000000 ,  0.103512000000000 , -0.064967000000000],
          [-0.051242000000000 , -0.123526000000000 , -0.066160000000000],
          [-0.059588000000000 , -0.074027000000000 , -0.052737000000000],
          [ 0.010571000000000 ,  0.093610000000000 ,  0.029032000000000],
          [-0.005852000000000 , -0.003541000000000 , -0.162190000000000],
          [-0.008068000000000 , -0.117649000000000 , -0.043293000000000],
          [-0.240445000000000 ,  0.054228000000000 , -0.097499000000000],
          [ 0.107574000000000 ,  0.022612000000000 ,  0.091151000000000],
          [ 0.240445000000000 , -0.054228000000000 ,  0.097499000000000],
          [ 0.294348000000000 ,  0.139697000000000 , -0.019448000000000]])

    e3 = np.array([
          [-0.000541000000000 , -0.000341000000000,  -0.086601000000000],
          [ 0.053009000000000 , -0.154366000000000,  -0.044409000000000],
          [-0.035382000000000 ,  0.009060000000000,  -0.106811000000000],
          [ 0.283777000000000 ,  0.046087000000000,  -0.048480000000000],
          [-0.007527000000000 , -0.117308000000000,   0.043308000000000],
          [ 0.230449000000000 ,  0.005090000000000,  -0.090513000000000],
          [-0.090798000000000 , -0.138941000000000,  -0.043387000000000],
          [ 0.139528000000000 , -0.087120000000000,   0.076569000000000],
          [-0.143807000000000 ,  0.015425000000000,   0.001022000000000],
          [ 0.420753000000000 ,  0.048994000000000,   0.000732000000000],
          [ 0.051242000000000 ,  0.123526000000000,   0.066160000000000],
          [ 0.060162000000000 , -0.057425000000000,   0.016487000000000],
          [-0.294348000000000 , -0.139697000000000,   0.019448000000000],
          [-0.256305000000000 , -0.078358000000000,  -0.056848000000000],
          [-0.119173000000000 ,  0.063676000000000,  -0.070111000000000],
          [-0.198453000000000 ,  0.112756000000000,   0.043175000000000],
          [-0.271900000000000 , -0.063277000000000,   0.036440000000000],
          [ 0.008068000000000 ,  0.117649000000000,   0.043293000000000],
          [ 0.198453000000000 , -0.112756000000000,  -0.043175000000000],
          [-0.420753000000000 , -0.048994000000000,  -0.000732000000000],
          [ 0.000736000000000 , -0.059707000000000,  -0.104547000000000],
          [ 0.219992000000000 ,  0.125741000000000,  -0.132980000000000],
          [-0.219992000000000 , -0.125741000000000,   0.132980000000000],
          [ 0.035382000000000 , -0.009060000000000,   0.106811000000000],
          [-0.138129000000000 ,  0.127076000000000,  -0.008635000000000],
          [ 0.138129000000000 , -0.127076000000000,   0.008635000000000],
          [ 0.063785000000000 , -0.079654000000000,   0.084500000000000],
          [ 0.007527000000000 ,  0.117308000000000,  -0.043308000000000],
          [-0.015860000000000 , -0.132586000000000,   0.040651000000000],
          [-0.165507000000000 ,  0.060583000000000,  -0.013461000000000],
          [-0.139528000000000 ,  0.087120000000000,  -0.076569000000000],
          [-0.010571000000000 , -0.093610000000000,  -0.029032000000000]])
     
    F_face_zero = np.array([
          [ 0.269893500822713 ,  0.443890985901144 , -0.003433900418441],
          [ 0.443890985901144 ,  0.730062809084536 , -0.005647699694811],
          [-0.003433900418441 , -0.005647699694811 ,  0.000043690092751]])

    F_face_end = np.array([         
          [ 0.043646196495641 , -0.064999721787375,   0.193691099936648],
          [-0.064999721787375 ,  0.096800275205152,  -0.288452800459490],
          [ 0.193691099936648 , -0.288452800459490,   0.859553528299207]])

    E1_edge_zero = np.array([
          [-0.009484256134360 ,  0.032591079138589 , -0.020757039620554],
          [ 0.032591079138589 ,  0.028535729025323 ,  0.010445131556807],
          [-0.020757039620554 ,  0.010445131556807 , -0.019051472890963]])

    E1_edge_end = np.array([
           [0.000542607423127 ,  0.105868369416843 ,  0.103818792244774],
           [0.105868369416843 , -0.628956834563690 ,  0.021787843099559],
           [0.103818792244774 ,  0.021787843099559 ,  0.628414227140563]])

    E2_edge_zero = np.array([
           [0.283607534453665 ,  0.240998876448777 ,  0.408161617702419],
           [0.240998876448777 , -0.043324121510275 ,  0.800012953918200],
           [0.408161617702419 ,  0.800012953918200 , -0.240283412943390]])

    E2_edge_end = np.array([
          [-0.008604193377836 ,  0.043931033752266,   0.185335587706247],
          [ 0.043931033752266 , -0.143972779194745,  -0.369269509062949],
          [ 0.185335587706247 , -0.369269509062949,   0.152576972572582]])
    
    E3_edge_zero = np.array([
          [ 0.509947879079244 ,  0.725680761224186 , -0.006043105069911],
          [ 0.725680761224187 , -0.509995573827219 , -0.002525199491313],
          [-0.006043105069911 , -0.002525199491313 ,  0.000047694747975]])
    
    E3_edge_end = np.array([
          [-0.479493905018774 ,  0.061575102289838 , -0.023949960574480],
          [ 0.061575102289838 ,  0.034964998427025 , -0.135160647184476],
          [-0.023949960574480 , -0.135160647184476 ,  0.444528906591748]])

    def test_asteroid_gravs(self):
        assert self.ast.asteroid_grav['num_f'] == self.faces
        assert self.ast.name == self.name

    def test_faces(self):
        assert self.ast.F.shape[0] == self.faces

    def test_vertices_V1(self):
        np.testing.assert_allclose(self.V1, self.ast.asteroid_grav['V1'], rtol=self.rel_tol)
    
    def test_vertices_V2(self):
        np.testing.assert_allclose(self.V2, self.ast.asteroid_grav['V2'], rtol=self.rel_tol)
    
    def test_vertices_V3(self):
        np.testing.assert_allclose(self.V3, self.ast.asteroid_grav['V3'], rtol=self.rel_tol)
            
    def test_edges_e1(self):
        np.testing.assert_array_almost_equal(self.e1,self.ast.asteroid_grav['e1'],decimal=self.decimal)

    def test_edges_e2(self):
        np.testing.assert_array_almost_equal(self.e2,self.ast.asteroid_grav['e2'],decimal=self.decimal)

    def test_edges_e3(self):
        np.testing.assert_array_almost_equal(self.e3,self.ast.asteroid_grav['e3'],decimal=self.decimal)

    def test_face_dyad_first(self):
        np.testing.assert_array_almost_equal(self.F_face_zero,self.ast.asteroid_grav['F_face'][:,:,0], decimal=self.decimal)

    def test_face_dyad_end(self):
        np.testing.assert_array_almost_equal(self.F_face_end,self.ast.asteroid_grav['F_face'][:,:,-1], decimal=self.decimal)

    def test_edge_one_dyad_first(self):
        np.testing.assert_array_almost_equal(self.E1_edge_zero,self.ast.asteroid_grav['E1_edge'][:,:,0], decimal=self.decimal)

    def test_edge_one_dyad_end(self):
        np.testing.assert_array_almost_equal(self.E1_edge_end,self.ast.asteroid_grav['E1_edge'][:,:,-1], decimal=self.decimal)

    def test_edge_two_dyad_first(self):
        np.testing.assert_array_almost_equal(self.E2_edge_zero,self.ast.asteroid_grav['E2_edge'][:,:,0], decimal=self.decimal)

    def test_edge_two_dyad_end(self):
        np.testing.assert_array_almost_equal(self.E2_edge_end,self.ast.asteroid_grav['E2_edge'][:,:,-1], decimal=self.decimal)

    def test_edge_three_dyad_first(self):
        np.testing.assert_array_almost_equal(self.E3_edge_zero,self.ast.asteroid_grav['E3_edge'][:,:,0], decimal=self.decimal)

    def test_edge_three_dyad_end(self):
        np.testing.assert_array_almost_equal(self.E3_edge_end,self.ast.asteroid_grav['E3_edge'][:,:,-1], decimal=self.decimal)

    def test_face_normal(self):
        pass

    def test_edge_normal(self):
        pass

    def test_edge_map(self):
        pass

    def test_face_map(self):
        pass
        
    def test_polyhedron_potential_U(self):
        np.testing.assert_allclose(self.U_true,self.U)

    def test_polyhedron_potential_Ug(self):
        np.testing.assert_allclose(self.Ug_true,self.Ug)

    def test_polyhedron_potential_Ug_mat(self):
        np.testing.assert_allclose(self.Ug_mat_true,self.Ug_mat)

    def test_polyhedron_potential_Ulaplace(self):
        np.testing.assert_almost_equal(self.Ulap_true,self.Ulap)

class TestAsteroidCastalia32():
    name = 'castalia'
    faces = 32
    rel_tol = 1e-3
    decimal = 3
    ast = dynamics.asteroid.Asteroid(name, faces)

    state = np.array([1.0,0.2,0.0])

    (U,Ug, Ug_mat, Ulap) = ast.polyhedron_potential(state)

    U_true = 6.833293127500053e-08
    Ug_true = 1e-7 * np.array([-0.766352770047407, -0.244511372833393, 0.053088099547142])
    Ug_mat_true = 1e-6 * np.array([[0.173095584649422,   0.095136610693398,  -0.029749276967576],
                                  [0.095136610693398,  -0.059099834150282,  -0.010959201354203],
                                  [-0.029749276967576,  -0.010959201354203,  -0.113995750499140]])
    Ulap_true = -5.761280515159674e-23

    V1 = np.array([
        [ 0.6595 ,   0.3555 ,   0.0664],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [-0.5382 ,   0.3219 ,   0.2870],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [-0.6986 ,   0.2012 ,   0.2065],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.5382 ,   0.3219 ,   0.2870],
        [-0.5382 ,   0.3219 ,   0.2870],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.7498 ,  -0.1377 ,   0.1593]])

    V2 = np.array([
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [-0.5382 ,   0.3219 ,   0.2870],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [-0.6986 ,   0.2012 ,   0.2065],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [-0.6986 ,   0.2012 ,   0.2065],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.5382 ,   0.3219 ,   0.2870],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [-0.5382 ,   0.3219 ,   0.2870]])
    
    V3 = np.array([
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [-0.6986 ,   0.2012 ,   0.2065],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.1148 ,   0.5169 ,   0.0972],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [-0.6986 ,   0.2012 ,   0.2065]])

    e1 = np.array([
       [ 0.1699,   -0.5125,    0.1174],
       [ 0.9061,    0.1447,   -0.0347],
       [ 0.3551,    0.0509,    0.0354],
       [-0.0084,   -0.0043,    0.2267],
       [-0.1699,    0.5125,   -0.1174],
       [-0.2387,    0.7701,    0.0069],
       [ 0.4116,   -0.0502,    0.1015],
       [-0.4111,   -0.0607,    0.6044],
       [ 0.2265,   -0.0626,   -0.4776],
       [ 0.4234,    0.1950,   -0.1898],
       [ 0.3488,   -0.3244,   -0.0425],
       [ 0.5354,    0.1438,    0.3628],
       [-0.3187,   -0.2292,   -0.0676],
       [ 0.1753,   -0.4015,   -0.5248],
       [ 0.3103,    0.2250,    0.2943],
       [-0.8864,   -0.0124,   -0.3669],
       [-0.1223,    0.2617,   -0.4351],
       [ 0.2471,   -0.1577,    0.0844],
       [-0.1753,    0.4015,    0.5248],
       [-0.4116,    0.0502,   -0.1015],
       [-0.4234,   -0.1950,    0.1898],
       [ 0.2387,   -0.7701,   -0.0069],
       [ 0.6881,   -0.3969,   -0.0197],
       [ 0.1721,   -0.0545,   -0.1507],
       [ 0.9202,    0.0801,   -0.2273],
       [-0.3375,   -0.4851,    0.0503],
       [ 0.3375,    0.4851,   -0.0503],
       [ 0.2229,    0.1466,   -0.0616],
       [ 1.0076,    0.1585,    0.1287],
       [ 0.2390,   -0.4270,   -0.0119],
       [ 0.5677,   -0.2169,    0.2993],
       [ 0.2116,    0.4595,    0.1278]])

    e2 = np.array([
       [ 0.0084 ,   0.0043 ,  -0.2267],
       [-0.4566 ,   0.2285 ,   0.0219],
       [-0.3633 ,  -0.1983 ,  -0.5135],
       [-0.3103 ,  -0.2250 ,  -0.2943],
       [-0.1721 ,   0.0545 ,   0.1507],
       [-0.2116 ,  -0.4595 ,  -0.1278],
       [-0.1726 ,  -0.3768 ,  -0.1133],
       [ 0.5838 ,   0.3157 ,  -0.1092],
       [ 0.1223 ,  -0.2617 ,   0.4351],
       [-0.5838 ,  -0.3157 ,   0.1092],
       [ 0.1015 ,   0.0138 ,   0.1634],
       [-0.7080 ,  -0.5206 ,  -0.4762],
       [-0.5677 ,   0.2169 ,  -0.2993],
       [-0.2265 ,   0.0626 ,   0.4776],
       [-0.2229 ,  -0.1466 ,   0.0616],
       [ 0.7080 ,   0.5206 ,   0.4762],
       [ 1.0425 ,  -0.1816 ,   0.2079],
       [-0.0082 ,  -0.1474 ,  -0.4781],
       [ 0.4111 ,   0.0607 ,  -0.6044],
       [ 0.1727 ,   0.2550 ,   0.4952],
       [ 0.6705 ,   0.0373 ,  -0.1054],
       [ 0.4495 ,   0.3732 ,  -0.0128],
       [-0.0177 ,   0.4342 ,  -0.0857],
       [-0.5354 ,  -0.1438 ,  -0.3628],
       [ 0.0874 ,   0.0784 ,   0.3559],
       [ 0.4566 ,  -0.2285 ,  -0.0219],
       [-0.3551 ,  -0.0509 ,  -0.0354],
       [-0.3420 ,   0.5670 ,   0.0332],
       [-0.9061 ,  -0.1447 ,   0.0347],
       [-0.4748 ,  -0.0353 ,   0.0915],
       [-1.0425 ,   0.1816 ,  -0.2079],
       [-0.1604 ,  -0.1207 ,  -0.0806]])

    e3 = np.array([
        [-0.1784 ,   0.5082 ,   0.1092],
        [-0.4495 ,  -0.3732 ,   0.0128],
        [ 0.0082 ,   0.1474 ,   0.4781],
        [ 0.3187 ,   0.2292 ,   0.0676],
        [ 0.3420 ,  -0.5670 ,  -0.0332],
        [ 0.4502 ,  -0.3106 ,   0.1209],
        [-0.2390 ,   0.4270 ,   0.0119],
        [-0.1727 ,  -0.2550 ,  -0.4952],
        [-0.3488 ,   0.3244 ,   0.0425],
        [ 0.1604 ,   0.1207 ,   0.0806],
        [-0.4502 ,   0.3106 ,  -0.1209],
        [ 0.1726 ,   0.3768 ,   0.1133],
        [ 0.8864 ,   0.0124 ,   0.3669],
        [ 0.0512 ,   0.3389 ,   0.0472],
        [-0.0874 ,  -0.0784 ,  -0.3559],
        [ 0.1784 ,  -0.5082 ,  -0.1092],
        [-0.9202 ,  -0.0801 ,   0.2273],
        [-0.2389 ,   0.3051 ,   0.3937],
        [-0.2358 ,  -0.4622 ,   0.0796],
        [ 0.2389 ,  -0.3051 ,  -0.3937],
        [-0.2471 ,   0.1577 ,  -0.0844],
        [-0.6881 ,   0.3969 ,   0.0197],
        [-0.6705 ,  -0.0373 ,   0.1054],
        [ 0.3633 ,   0.1983 ,   0.5135],
        [-1.0076 ,  -0.1585 ,  -0.1287],
        [-0.1192 ,   0.7135 ,  -0.0284],
        [ 0.0177 ,  -0.4342 ,   0.0857],
        [ 0.1192 ,  -0.7135 ,   0.0284],
        [-0.1015 ,  -0.0138 ,  -0.1634],
        [ 0.2358 ,   0.4622 ,  -0.0796],
        [ 0.4748 ,   0.0353 ,  -0.0915],
        [-0.0512 ,  -0.3389 ,  -0.0472]])
     
    F_face_zero = np.array([
        [0.8940,    0.3054,    0.0390],
        [0.3054,    0.1043,    0.0133],
        [0.0390,    0.0133,    0.0017]])

    F_face_end = np.array([
            [0.1667 ,   0.0266  , -0.3718],
            [0.0266 ,   0.0042  , -0.0593],
           [-0.3718,   -0.0593 ,   0.8290]])

    E1_edge_zero = np.array([
        [0.3516 ,   0.2135 ,   0.4229],
        [0.2135 ,   0.0802 ,   0.0412],
        [0.4229 ,   0.0412 ,  -0.4318]])

    E1_edge_end = np.array([
       [-0.0542 ,   0.0405 ,  -0.0560],
       [ 0.0405 ,  -0.0201 ,   0.0051],
       [-0.0560 ,   0.0051 ,   0.0743]])

    E2_edge_zero = np.array([
       [ 0.7791 ,  -0.5549 ,   0.0185],
       [-0.5549 ,  -0.7791 ,  -0.0354],
       [ 0.0185 ,  -0.0354 ,   0.0000]])

    E2_edge_end = np.array([
        [ 0.4413 ,  -0.3398 ,  -0.3697],
        [-0.3398 ,  -0.0506 ,   0.7523],
        [-0.3697 ,   0.7523 ,  -0.3908]])
    
    E3_edge_zero = np.array([
        [ 0.2897 ,   0.2672 ,  -0.7697],
        [ 0.2672 ,   0.1323 ,  -0.1794],
        [-0.7697 ,  -0.1794 ,  -0.4221]])
    
    E3_edge_end = np.array([
        [ 0.7695 ,  -0.0301 ,  -0.6180],
        [-0.0301 ,  -0.0229 ,   0.1974],
        [-0.6180 ,   0.1974 ,  -0.7466]])

    def test_asteroid_gravs(self):
        assert self.ast.asteroid_grav['num_f'] == self.faces
        assert self.ast.name == self.name

    def test_faces(self):
        assert self.ast.F.shape[0] == self.faces

    def test_vertices_V1(self):
        np.testing.assert_allclose(self.V1, self.ast.asteroid_grav['V1'], rtol=self.rel_tol)
    
    def test_vertices_V2(self):
        np.testing.assert_allclose(self.V2, self.ast.asteroid_grav['V2'], rtol=self.rel_tol)
    
    def test_vertices_V3(self):
        np.testing.assert_allclose(self.V3, self.ast.asteroid_grav['V3'], rtol=self.rel_tol)
            
    def test_edges_e1(self):
        np.testing.assert_array_almost_equal(self.e1,self.ast.asteroid_grav['e1'],decimal=self.decimal)

    def test_edges_e2(self):
        np.testing.assert_array_almost_equal(self.e2,self.ast.asteroid_grav['e2'],decimal=self.decimal)

    def test_edges_e3(self):
        np.testing.assert_array_almost_equal(self.e3,self.ast.asteroid_grav['e3'],decimal=self.decimal)

    def test_face_dyad_first(self):
        np.testing.assert_array_almost_equal(self.F_face_zero,self.ast.asteroid_grav['F_face'][:,:,0], decimal=self.decimal)

    def test_face_dyad_end(self):
        np.testing.assert_array_almost_equal(self.F_face_end,self.ast.asteroid_grav['F_face'][:,:,-1], decimal=self.decimal)

    def test_edge_one_dyad_first(self):
        np.testing.assert_array_almost_equal(self.E1_edge_zero,self.ast.asteroid_grav['E1_edge'][:,:,0], decimal=self.decimal)

    def test_edge_one_dyad_end(self):
        np.testing.assert_array_almost_equal(self.E1_edge_end,self.ast.asteroid_grav['E1_edge'][:,:,-1], decimal=self.decimal)

    def test_edge_two_dyad_first(self):
        np.testing.assert_array_almost_equal(self.E2_edge_zero,self.ast.asteroid_grav['E2_edge'][:,:,0], decimal=self.decimal)

    def test_edge_two_dyad_end(self):
        np.testing.assert_array_almost_equal(self.E2_edge_end,self.ast.asteroid_grav['E2_edge'][:,:,-1], decimal=self.decimal)

    def test_edge_three_dyad_first(self):
        np.testing.assert_array_almost_equal(self.E3_edge_zero,self.ast.asteroid_grav['E3_edge'][:,:,0], decimal=self.decimal)

    def test_edge_three_dyad_end(self):
        np.testing.assert_array_almost_equal(self.E3_edge_end,self.ast.asteroid_grav['E3_edge'][:,:,-1], decimal=self.decimal)

    def test_face_normal(self):
        pass

    def test_edge_normal(self):
        pass

    def test_edge_map(self):
        pass

    def test_face_map(self):
        pass
        
    def test_polyhedron_potential_U(self):
        np.testing.assert_allclose(self.U_true,self.U)

    def test_polyhedron_potential_Ug(self):
        np.testing.assert_allclose(self.Ug_true,self.Ug)

    def test_polyhedron_potential_Ug_mat(self):
        np.testing.assert_allclose(self.Ug_mat_true,self.Ug_mat)

    def test_polyhedron_potential_Ulaplace(self):
        np.testing.assert_almost_equal(self.Ulap_true,self.Ulap)

# TODO:Add test for reading directly from shape file
class TestAsteroidItokawaOBJ():
    """Testing out the polyhedron potential model using the OBJ file directly
    """
    # initialize the asteroid object using itokawa and OBJ
    num_faces = 128
    ast = dynamics.asteroid.Asteroid('itokawa', 128, shape_flag='obj')
    
    def test_ensure_number_of_faces(self):
        np.testing.assert_allclose(1, 1)
    def test_ensure_number_of_vertices(self):
        assert self.ast.V.shape[0] <= 25350
    # TODO: Test point outside body is actuall outside based on check

    # TODO: Add a test that generates and visualizes the gravity field using contour plots

    # TODO:Test to ensure we can read all three asteroid types

    # TODO: Test to verify mass properties

    # TODO: Test the compares obj potential with teh same number of faces as one that is in matlab
