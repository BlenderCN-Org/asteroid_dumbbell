import numpy as np
import dynamics.asteroid
import pdb

class TestAsteroidCastalia32():
    name = 'castalia'
    faces = 32
    ast = dynamics.asteroid.Asteroid(name, faces)

    V1 = np.array([
        [0.6595,    0.3555,    0.0664],
        [0.2995,   -0.4483,    0.2802],
        [0.1323,    0.3591,    0.1816],
        [0.8379,   -0.1526,   -0.0429],
        [0.8294,   -0.1569,    0.1838],
        [0.2995,   -0.4483,    0.2802],
        [0.2875,    0.2619,   -0.3980],
        [0.2875,    0.2619,   -0.3980],
        [0.7498,   -0.1377,    0.1593],
        [0.5382,    0.3219,    0.2870],
        [0.7498,   -0.1377,    0.1593],
        [0.1241,    0.2117,   -0.2965],
        [0.8379,   -0.1526,   -0.0429],
        [0.6986,    0.2012,    0.2065],
        [0.5192,   -0.3819,   -0.1105],
        [0.8379,   -0.1526,   -0.0429],
        [0.4010,   -0.4620,    0.1168],
        [0.1148,    0.5169,    0.0972],
        [0.5233,   -0.2003,   -0.3184],
        [0.1241,    0.2117,   -0.2965],
        [0.1148,    0.5169,    0.0972],
        [0.5382,    0.3219,    0.2870],
        [0.5382,    0.3219,    0.2870],
        [0.4874,    0.4100,    0.2170],
        [0.4010,   -0.4620,    0.1168],
        [0.4874,    0.4100,    0.2170],
        [0.1500,   -0.0750,    0.2673],
        [0.6066,   -0.3035,    0.2454],
        [0.4010,   -0.4620,    0.1168],
        [0.2875,    0.2619,   -0.3980],
        [0.0485,   -0.1650,   -0.4098],
        [0.7498,   -0.1377,    0.1593]])

    V2 = np.array([
        [ 0.8294,   -0.1569,    0.1838],
        [ 0.6066,   -0.3035,    0.2454],
        [ 0.4874,    0.4100,    0.2170],
        [ 0.8294,   -0.1569,    0.1838],
        [ 0.6595,    0.3555,    0.0664],
        [-0.5382,    0.3219,    0.2870],
        [ 0.1241,    0.2117,   -0.2965],
        [-0.6986,    0.2012,    0.2065],
        [-0.5233,   -0.2003,   -0.3184],
        [-0.1148,    0.5169,    0.0972],
        [-0.4010,   -0.4620,    0.1168],
        [ 0.6595,    0.3555,    0.0664],
        [ 0.5192,   -0.3819,   -0.1105],
        [-0.5233,   -0.2003,   -0.3184],
        [ 0.8294,   -0.1569,    0.1838],
        [-0.0485,   -0.1650,   -0.4098],
        [-0.5233,   -0.2003,   -0.3184],
        [ 0.1323,    0.3591,    0.1816],
        [-0.6986,    0.2012,    0.2065],
        [-0.2875,    0.2619,   -0.3980],
        [-0.5382,    0.3219,    0.2870],
        [-0.2995,   -0.4483,    0.2802],
        [ 0.1500,   -0.0750,    0.2673],
        [ 0.6595,    0.3555,    0.0664],
        [ 0.5192,   -0.3819,   -0.1105],
        [ 0.1500,   -0.0750,    0.2673],
        [ 0.4874,    0.4100,    0.2170],
        [ 0.8294,   -0.1569,    0.1838],
        [ 0.6066,   -0.3035,    0.2454],
        [-0.0485,   -0.1650,   -0.4098],
        [ 0.5192,   -0.3819,   -0.1105],
        [-0.5382,    0.3219,    0.2870]])
    
    V3 = np.array([
        [ 0.8379,   -0.1526,   -0.0429],
        [ 0.1500,   -0.0750,    0.2673],
        [ 0.1241,    0.2117,   -0.2965],
        [ 0.5192,   -0.3819,   -0.1105],
        [ 0.4874,    0.4100,    0.2170],
        [-0.7498,   -0.1377,    0.1593],
        [-0.0485,   -0.1650,   -0.4098],
        [-0.1148,    0.5169,    0.0972],
        [-0.4010,   -0.4620,    0.1168],
        [-0.6986,    0.2012,    0.2065],
        [-0.2995,   -0.4483,    0.2802],
        [-0.0485,   -0.1650,   -0.4098],
        [-0.0485,   -0.1650,   -0.4098],
        [-0.7498,   -0.1377,    0.1593],
        [ 0.6066,   -0.3035,    0.2454],
        [ 0.6595,    0.3555,    0.0664],
        [ 0.5192,   -0.3819,   -0.1105],
        [ 0.1241,    0.2117,   -0.2965],
        [-0.2875,    0.2619,   -0.3980],
        [-0.1148,    0.5169,    0.0972],
        [ 0.1323,    0.3591,    0.1816],
        [ 0.1500,   -0.0750,    0.2673],
        [ 0.1323,    0.3591,    0.1816],
        [ 0.1241,    0.2117,   -0.2965],
        [ 0.6066,   -0.3035,    0.2454],
        [ 0.6066,   -0.3035,    0.2454],
        [ 0.1323,    0.3591,    0.1816],
        [ 0.4874,    0.4100,    0.2170],
        [-0.2995,   -0.4483,    0.2802],
        [-0.5233,   -0.2003,   -0.3184],
        [-0.5233,   -0.2003,   -0.3184],
        [-0.6986,    0.2012,    0.2065]])
    def test_asteroid_params(self):
        assert self.ast.asteroid_param['num_f'] == self.faces
        assert self.ast.name == self.name

    def test_faces(self):
        assert self.ast.F.shape[0] == self.faces

    def test_vertices_V1(self):
        np.testing.assert_allclose(self.V1, self.ast.asteroid_param['V1'], rtol=1e-4)
    
    def test_vertices_V2(self):
        np.testing.assert_allclose(self.V2, self.ast.asteroid_param['V2'], rtol=1e-4)
    
    def test_vertices_V3(self):
        np.testing.assert_allclose(self.V3, self.ast.asteroid_param['V3'], rtol=1e-4)
            

    def test_edges(self):
        pass

    def test_edge_dyad(self):
        pass

    def test_face_dyad(self):
        pass

    def test_face_normal(self):
        pass

    def test_edge_normal(self):
        pass

    def test_edge_map(self):
        pass

    def test_face_map(self):
        pass
        # ensure everything matches Matlab from the class definition

        # might want to set up a test fixture since there will be several related tests
        

    # test vertices

    # test edges

    # test edge normals

    # test face normals

    # test E for each edge

    # test F for each face

    # test the edge/face maps