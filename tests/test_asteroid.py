import numpy as np
import dynamics.asteroid
import pdb

class TestAsteroidCastalia32():
    name = 'castalia'
    faces = 32
    rel_tol = 1e-3
    decimal = 3
    ast = dynamics.asteroid.Asteroid(name, faces)

    V1 = np.array([
        [ 0.6595 ,   0.3555 ,   0.0664],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [-0.5382 ,   0.3219 ,   0.2870],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [-0.6986 ,   0.2012 ,   0.2065],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.5382 ,   0.3219 ,   0.2870],
        [-0.5382 ,   0.3219 ,   0.2870],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.7498 ,  -0.1377 ,   0.1593]])

    V2 = np.array([
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [-0.5382 ,   0.3219 ,   0.2870],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [-0.6986 ,   0.2012 ,   0.2065],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [-0.6986 ,   0.2012 ,   0.2065],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.5382 ,   0.3219 ,   0.2870],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [ 0.8294 ,  -0.1569 ,   0.1838],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [-0.5382 ,   0.3219 ,   0.2870]])
    
    V3 = np.array([
        [ 0.8379 ,  -0.1526 ,  -0.0429],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.1148 ,   0.5169 ,   0.0972],
        [-0.4010 ,  -0.4620 ,   0.1168],
        [-0.6986 ,   0.2012 ,   0.2065],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.0485 ,  -0.1650 ,  -0.4098],
        [-0.7498 ,  -0.1377 ,   0.1593],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.6595 ,   0.3555 ,   0.0664],
        [ 0.5192 ,  -0.3819 ,  -0.1105],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [-0.2875 ,   0.2619 ,  -0.3980],
        [-0.1148 ,   0.5169 ,   0.0972],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.1500 ,  -0.0750 ,   0.2673],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.1241 ,   0.2117 ,  -0.2965],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.6066 ,  -0.3035 ,   0.2454],
        [ 0.1323 ,   0.3591 ,   0.1816],
        [ 0.4874 ,   0.4100 ,   0.2170],
        [-0.2995 ,  -0.4483 ,   0.2802],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [-0.5233 ,  -0.2003 ,  -0.3184],
        [-0.6986 ,   0.2012 ,   0.2065]])

    e1 = np.array([
       [ 0.1699,   -0.5125,    0.1174],
       [ 0.9061,    0.1447,   -0.0347],
       [ 0.3551,    0.0509,    0.0354],
       [-0.0084,   -0.0043,    0.2267],
       [-0.1699,    0.5125,   -0.1174],
       [-0.2387,    0.7701,    0.0069],
       [ 0.4116,   -0.0502,    0.1015],
       [-0.4111,   -0.0607,    0.6044],
       [ 0.2265,   -0.0626,   -0.4776],
       [ 0.4234,    0.1950,   -0.1898],
       [ 0.3488,   -0.3244,   -0.0425],
       [ 0.5354,    0.1438,    0.3628],
       [-0.3187,   -0.2292,   -0.0676],
       [ 0.1753,   -0.4015,   -0.5248],
       [ 0.3103,    0.2250,    0.2943],
       [-0.8864,   -0.0124,   -0.3669],
       [-0.1223,    0.2617,   -0.4351],
       [ 0.2471,   -0.1577,    0.0844],
       [-0.1753,    0.4015,    0.5248],
       [-0.4116,    0.0502,   -0.1015],
       [-0.4234,   -0.1950,    0.1898],
       [ 0.2387,   -0.7701,   -0.0069],
       [ 0.6881,   -0.3969,   -0.0197],
       [ 0.1721,   -0.0545,   -0.1507],
       [ 0.9202,    0.0801,   -0.2273],
       [-0.3375,   -0.4851,    0.0503],
       [ 0.3375,    0.4851,   -0.0503],
       [ 0.2229,    0.1466,   -0.0616],
       [ 1.0076,    0.1585,    0.1287],
       [ 0.2390,   -0.4270,   -0.0119],
       [ 0.5677,   -0.2169,    0.2993],
       [ 0.2116,    0.4595,    0.1278]])

    e2 = np.array([
       [ 0.0084 ,   0.0043 ,  -0.2267],
       [-0.4566 ,   0.2285 ,   0.0219],
       [-0.3633 ,  -0.1983 ,  -0.5135],
       [-0.3103 ,  -0.2250 ,  -0.2943],
       [-0.1721 ,   0.0545 ,   0.1507],
       [-0.2116 ,  -0.4595 ,  -0.1278],
       [-0.1726 ,  -0.3768 ,  -0.1133],
       [ 0.5838 ,   0.3157 ,  -0.1092],
       [ 0.1223 ,  -0.2617 ,   0.4351],
       [-0.5838 ,  -0.3157 ,   0.1092],
       [ 0.1015 ,   0.0138 ,   0.1634],
       [-0.7080 ,  -0.5206 ,  -0.4762],
       [-0.5677 ,   0.2169 ,  -0.2993],
       [-0.2265 ,   0.0626 ,   0.4776],
       [-0.2229 ,  -0.1466 ,   0.0616],
       [ 0.7080 ,   0.5206 ,   0.4762],
       [ 1.0425 ,  -0.1816 ,   0.2079],
       [-0.0082 ,  -0.1474 ,  -0.4781],
       [ 0.4111 ,   0.0607 ,  -0.6044],
       [ 0.1727 ,   0.2550 ,   0.4952],
       [ 0.6705 ,   0.0373 ,  -0.1054],
       [ 0.4495 ,   0.3732 ,  -0.0128],
       [-0.0177 ,   0.4342 ,  -0.0857],
       [-0.5354 ,  -0.1438 ,  -0.3628],
       [ 0.0874 ,   0.0784 ,   0.3559],
       [ 0.4566 ,  -0.2285 ,  -0.0219],
       [-0.3551 ,  -0.0509 ,  -0.0354],
       [-0.3420 ,   0.5670 ,   0.0332],
       [-0.9061 ,  -0.1447 ,   0.0347],
       [-0.4748 ,  -0.0353 ,   0.0915],
       [-1.0425 ,   0.1816 ,  -0.2079],
       [-0.1604 ,  -0.1207 ,  -0.0806]])

    e3 = np.array([
        [-0.1784 ,   0.5082 ,   0.1092],
        [-0.4495 ,  -0.3732 ,   0.0128],
        [ 0.0082 ,   0.1474 ,   0.4781],
        [ 0.3187 ,   0.2292 ,   0.0676],
        [ 0.3420 ,  -0.5670 ,  -0.0332],
        [ 0.4502 ,  -0.3106 ,   0.1209],
        [-0.2390 ,   0.4270 ,   0.0119],
        [-0.1727 ,  -0.2550 ,  -0.4952],
        [-0.3488 ,   0.3244 ,   0.0425],
        [ 0.1604 ,   0.1207 ,   0.0806],
        [-0.4502 ,   0.3106 ,  -0.1209],
        [ 0.1726 ,   0.3768 ,   0.1133],
        [ 0.8864 ,   0.0124 ,   0.3669],
        [ 0.0512 ,   0.3389 ,   0.0472],
        [-0.0874 ,  -0.0784 ,  -0.3559],
        [ 0.1784 ,  -0.5082 ,  -0.1092],
        [-0.9202 ,  -0.0801 ,   0.2273],
        [-0.2389 ,   0.3051 ,   0.3937],
        [-0.2358 ,  -0.4622 ,   0.0796],
        [ 0.2389 ,  -0.3051 ,  -0.3937],
        [-0.2471 ,   0.1577 ,  -0.0844],
        [-0.6881 ,   0.3969 ,   0.0197],
        [-0.6705 ,  -0.0373 ,   0.1054],
        [ 0.3633 ,   0.1983 ,   0.5135],
        [-1.0076 ,  -0.1585 ,  -0.1287],
        [-0.1192 ,   0.7135 ,  -0.0284],
        [ 0.0177 ,  -0.4342 ,   0.0857],
        [ 0.1192 ,  -0.7135 ,   0.0284],
        [-0.1015 ,  -0.0138 ,  -0.1634],
        [ 0.2358 ,   0.4622 ,  -0.0796],
        [ 0.4748 ,   0.0353 ,  -0.0915],
        [-0.0512 ,  -0.3389 ,  -0.0472]])
     
    def test_asteroid_params(self):
        assert self.ast.asteroid_param['num_f'] == self.faces
        assert self.ast.name == self.name

    def test_faces(self):
        assert self.ast.F.shape[0] == self.faces

    def test_vertices_V1(self):
        np.testing.assert_allclose(self.V1, self.ast.asteroid_param['V1'], rtol=self.rel_tol)
    
    def test_vertices_V2(self):
        np.testing.assert_allclose(self.V2, self.ast.asteroid_param['V2'], rtol=self.rel_tol)
    
    def test_vertices_V3(self):
        np.testing.assert_allclose(self.V3, self.ast.asteroid_param['V3'], rtol=self.rel_tol)
            
    def test_edges_e1(self):
        np.testing.assert_array_almost_equal(self.e1,self.ast.asteroid_param['e1'],decimal=self.decimal)

    def test_edges_e2(self):
        np.testing.assert_array_almost_equal(self.e2,self.ast.asteroid_param['e2'],decimal=self.decimal)

    def test_edges_e3(self):
        np.testing.assert_array_almost_equal(self.e3,self.ast.asteroid_param['e3'],decimal=self.decimal)


    def test_edges(self):
        pass

    def test_edge_dyad(self):
        pass

    def test_face_dyad(self):
        pass

    def test_face_normal(self):
        pass

    def test_edge_normal(self):
        pass

    def test_edge_map(self):
        pass

    def test_face_map(self):
        pass
        # ensure everything matches Matlab from the class definition

        # might want to set up a test fixture since there will be several related tests
        

    # test vertices

    # test edges

    # test edge normals

    # test face normals

    # test E for each edge

    # test F for each face

    # test the edge/face maps